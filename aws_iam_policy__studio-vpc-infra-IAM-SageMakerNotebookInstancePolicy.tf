#Â File generated by aws2tf see https://github.com/aws-samples/aws2tf
# aws_iam_policy.studio-vpc-infra-IAM-XE8WWDTVFFJ2-SageMakerNotebookInstancePolicy-1JLTIEYH5S0BD:
resource "aws_iam_policy" "studio-vpc-infra-IAM-XE8WWDTVFFJ2-SageMakerNotebookInstancePolicy-1JLTIEYH5S0BD" {
  description = "SageMaker Notebook restricted access"
  name        = "studio-vpc-infra-IAM-XE8WWDTVFFJ2-SageMakerNotebookInstancePolicy-1JLTIEYH5S0BD"
  path        = "/"
  policy = jsonencode(
    {
      Statement = [
        {
          Action = [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:DescribeLogStreams",
            "logs:PutLogEvents",
            "logs:GetLogEvents",
          ]
          Effect = "Allow"
          Resource = [
            format("arn:aws:logs:%s:%s:log-group:/aws/sagemaker/*",data.aws_region.current.name,data.aws_caller_identity.current.account_id),
            format("arn:aws:logs:%s:%s:log-stream:*",data.aws_region.current.name,data.aws_caller_identity.current.account_id)
          ]
          Sid = "CloudWatchLogsAccess"
        },
        {
          Action = [
            "cloudwatch:GetMetricStatistics",
            "cloudwatch:ListMetrics",
            "cloudwatch:PutMetricData",
            "cloudwatch:GetMetricData",
            "cloudwatch:PutMetricAlarm",
            "cloudwatch:DescribeAlarms",
          ]
          Effect   = "Allow"
          Resource = "*"
          Sid      = "CloudWatchMetricsAccess"
        },
        {
          Action = [
            "kms:CreateGrant'",
            "kms:Decrypt",
            "kms:DescribeKey",
            "kms:Encrypt",
            "kms:GenerateDataKey",
            "kms:ListAliases",
          ]
          Effect   = "Allow"
          Resource = "*"
          Sid      = "KMSAccess"
        },
        {
          Action = [
            "s3:GetObject",
            "s3:PutObject",
            "s3:DeleteObject",
            "s3:ListBucket",
          ]
          Effect = "Allow"
          Resource = [
            format("arn:aws:s3:::studiovpc-data-%s/*",data.aws_caller_identity.current.account_id)
          ]
          Sid = "S3Access"
        },
        {
          Action = [
            "ecr:GetAuthorizationToken",
            "ecr:GetDownloadUrlForLayer",
            "ecr:BatchGetImage",
            "ecr:BatchCheckLayerAvailability",
            "ecr:SetRepositoryPolicy",
            "ecr:CompleteLayerUpload",
            "ecr:BatchDeleteImage",
            "ecr:UploadLayerPart",
            "ecr:InitiateLayerUpload",
            "ecr:PutImage",
          ]
          Effect   = "Allow"
          Resource = "arn:aws:ecr:*:*:repository/*sagemaker*"
          Sid      = "ECRAccess"
        },
        {
          Action = [
            "iam:PassRole",
          ]
          Condition = {
            StringEquals = {
              "iam:PassedToService" = "sagemaker.amazonaws.com"
            }
          }
          Effect   = "Allow"
          Resource = "*"
          Sid      = "PassRole"
        },
        {
          Action = [
            "sagemaker:CreateTrainingJob",
            "sagemaker:CreateProcessingJob",
            "sagemaker:CreateModel",
            "sagemaker:CreateHyperParameterTuningJob",
          ]
          Condition = {
            Null = {
              "sagemaker:VpcSubnets" = "true"
            }
          }
          Effect   = "Deny"
          Resource = "*"
          Sid      = "SageMakerAccess"
        },
        {
          Action = [
            "sagemaker:Describe*",
            "sagemaker:List*",
          ]
          Effect   = "Allow"
          Resource = "*"
          Sid      = "SageMakerList"
        },
        {
          Action = [
            "sagemaker:CreateApp",
          ]
          Effect   = "Allow"
          Resource = "*"
          Sid      = "SageMakerStudioSignedURLCreation"
        },
        {
          Action = [
            "ec2:CreateNetworkInterface",
            "ec2:CreateNetworkInterfacePermission",
            "ec2:DeleteNetworkInterface",
            "ec2:DeleteNetworkInterfacePermission",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DescribeVpcs",
            "ec2:DescribeDhcpOptions",
            "ec2:DescribeSubnets",
            "ec2:DescribeSecurityGroups",
            "ec2:DescribeVpcEndpoints",
          ]
          Effect   = "Allow"
          Resource = "*"
          Sid      = "EC2Access"
        },
      ]
      Version = "2012-10-17"
    }
  )
  tags     = {}
  tags_all = {}
}
